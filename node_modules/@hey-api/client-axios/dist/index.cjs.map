{"version":3,"sources":["../src/utils.ts","../src/index.ts"],"names":["PATH_PARAM_RE","serializePrimitiveParam","allowReserved","name","value","separatorArrayExplode","style","separatorArrayNoExplode","separatorObjectExplode","serializeArrayParam","explode","joinedValues","v","separator","serializeObjectParam","values","key","defaultPathSerializer","path","_url","url","matches","match","replaceValue","getUrl","serializeFormDataPair","formData","mergeConfigs","a","b","config","mergeHeaders","headers","mergedHeaders","header","iterator","formDataBodySerializer","body","jsonBodySerializer","serializeUrlSearchParamsPair","data","urlSearchParamsBodySerializer","createConfig","override","createClient","_config","instance","axios","getConfig","setConfig","request","options","opts","_axios","response","error","e"],"mappings":"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","file":"index.cjs","sourcesContent":["import type { Config } from './types';\n\ninterface PathSerializer {\n  path: Record<string, unknown>;\n  url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\nexport type BodySerializer = (body: any) => any;\n\ninterface SerializerOptions<T> {\n  /**\n   * @default true\n   */\n  explode: boolean;\n  style: T;\n}\n\ninterface SerializeOptions<T>\n  extends SerializePrimitiveOptions,\n    SerializerOptions<T> {}\ninterface SerializePrimitiveOptions {\n  allowReserved?: boolean;\n  name: string;\n}\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n  value: string;\n}\n\nconst serializePrimitiveParam = ({\n  allowReserved,\n  name,\n  value,\n}: SerializePrimitiveParam) => {\n  if (value === undefined || value === null) {\n    return '';\n  }\n\n  if (typeof value === 'object') {\n    throw new Error(\n      'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n    );\n  }\n\n  return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nconst separatorArrayExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nconst separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'form':\n      return ',';\n    case 'pipeDelimited':\n      return '|';\n    case 'spaceDelimited':\n      return '%20';\n    default:\n      return ',';\n  }\n};\n\nconst separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nconst serializeArrayParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ArraySeparatorStyle> & {\n  value: unknown[];\n}) => {\n  if (!explode) {\n    const joinedValues = (\n      allowReserved ? value : value.map((v) => encodeURIComponent(v as string))\n    ).join(separatorArrayNoExplode(style));\n    switch (style) {\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      case 'simple':\n        return joinedValues;\n      default:\n        return `${name}=${joinedValues}`;\n    }\n  }\n\n  const separator = separatorArrayExplode(style);\n  const joinedValues = value\n    .map((v) => {\n      if (style === 'label' || style === 'simple') {\n        return allowReserved ? v : encodeURIComponent(v as string);\n      }\n\n      return serializePrimitiveParam({\n        allowReserved,\n        name,\n        value: v as string,\n      });\n    })\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n\nconst serializeObjectParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ObjectSeparatorStyle> & {\n  value: Record<string, unknown>;\n}) => {\n  if (style !== 'deepObject' && !explode) {\n    let values: string[] = [];\n    Object.entries(value).forEach(([key, v]) => {\n      values = [\n        ...values,\n        key,\n        allowReserved ? (v as string) : encodeURIComponent(v as string),\n      ];\n    });\n    const joinedValues = values.join(',');\n    switch (style) {\n      case 'form':\n        return `${name}=${joinedValues}`;\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      default:\n        return joinedValues;\n    }\n  }\n\n  const separator = separatorObjectExplode(style);\n  const joinedValues = Object.entries(value)\n    .map(([key, v]) =>\n      serializePrimitiveParam({\n        allowReserved,\n        name: style === 'deepObject' ? `${name}[${key}]` : key,\n        value: v as string,\n      }),\n    )\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n  let url = _url;\n  const matches = _url.match(PATH_PARAM_RE);\n  if (matches) {\n    for (const match of matches) {\n      let explode = false;\n      let name = match.substring(1, match.length - 1);\n      let style: ArraySeparatorStyle = 'simple';\n\n      if (name.endsWith('*')) {\n        explode = true;\n        name = name.substring(0, name.length - 1);\n      }\n\n      if (name.startsWith('.')) {\n        name = name.substring(1);\n        style = 'label';\n      } else if (name.startsWith(';')) {\n        name = name.substring(1);\n        style = 'matrix';\n      }\n\n      const value = path[name];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      if (Array.isArray(value)) {\n        url = url.replace(\n          match,\n          serializeArrayParam({ explode, name, style, value }),\n        );\n        continue;\n      }\n\n      if (typeof value === 'object') {\n        url = url.replace(\n          match,\n          serializeObjectParam({\n            explode,\n            name,\n            style,\n            value: value as Record<string, unknown>,\n          }),\n        );\n        continue;\n      }\n\n      if (style === 'matrix') {\n        url = url.replace(\n          match,\n          `;${serializePrimitiveParam({\n            name,\n            value: value as string,\n          })}`,\n        );\n        continue;\n      }\n\n      const replaceValue = encodeURIComponent(\n        style === 'label' ? `.${value as string}` : (value as string),\n      );\n      url = url.replace(match, replaceValue);\n    }\n  }\n  return url;\n};\n\nexport const getUrl = ({\n  path,\n  url,\n}: {\n  path?: Record<string, unknown>;\n  url: string;\n}) => (path ? defaultPathSerializer({ path, url }) : url);\n\nconst serializeFormDataPair = (\n  formData: FormData,\n  key: string,\n  value: unknown,\n) => {\n  if (typeof value === 'string' || value instanceof Blob) {\n    formData.append(key, value);\n  } else {\n    formData.append(key, JSON.stringify(value));\n  }\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n  const config = { ...a, ...b };\n  config.headers = mergeHeaders(a.headers, b.headers);\n  return config;\n};\n\nexport const mergeHeaders = (\n  ...headers: Array<Required<Config>['headers'] | undefined>\n): Required<Config>['headers'] => {\n  const mergedHeaders: Required<Config>['headers'] = {};\n  for (const header of headers) {\n    if (!header || typeof header !== 'object') {\n      continue;\n    }\n\n    const iterator = Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (value === null) {\n        // @ts-expect-error\n        delete mergedHeaders[key];\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          // @ts-expect-error\n          mergedHeaders[key] = [...(mergedHeaders[key] ?? []), v as string];\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        // @ts-expect-error\n        mergedHeaders[key] =\n          typeof value === 'object' ? JSON.stringify(value) : (value as string);\n      }\n    }\n  }\n  return mergedHeaders;\n};\n\nexport const formDataBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const formData = new FormData();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeFormDataPair(formData, key, v));\n      } else {\n        serializeFormDataPair(formData, key, value);\n      }\n    });\n\n    return formData;\n  },\n};\n\nexport const jsonBodySerializer = {\n  bodySerializer: <T>(body: T) => JSON.stringify(body),\n};\n\nconst serializeUrlSearchParamsPair = (\n  data: URLSearchParams,\n  key: string,\n  value: unknown,\n) => {\n  if (typeof value === 'string') {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nexport const urlSearchParamsBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new URLSearchParams();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeUrlSearchParamsPair(data, key, v));\n      } else {\n        serializeUrlSearchParamsPair(data, key, value);\n      }\n    });\n\n    return data;\n  },\n};\n\nexport const createConfig = (override: Config = {}): Config => ({\n  baseURL: '',\n  ...override,\n});\n","import type { AxiosError, RawAxiosRequestHeaders } from 'axios';\nimport axios from 'axios';\n\nimport type { Client, Config } from './types';\nimport { createConfig, getUrl, mergeConfigs, mergeHeaders } from './utils';\n\nexport const createClient = (config: Config): Client => {\n  let _config = mergeConfigs(createConfig(), config);\n\n  const instance = axios.create(_config);\n\n  const getConfig = (): Config => ({ ..._config });\n\n  const setConfig = (config: Config): Config => {\n    _config = mergeConfigs(_config, config);\n    instance.defaults = {\n      ...instance.defaults,\n      ..._config,\n      // @ts-expect-error\n      headers: mergeHeaders(instance.defaults.headers, _config.headers),\n    };\n    return getConfig();\n  };\n\n  // @ts-expect-error\n  const request: Client['request'] = async (options) => {\n    const opts = {\n      ..._config,\n      ...options,\n      headers: mergeHeaders(\n        _config.headers,\n        options.headers,\n      ) as RawAxiosRequestHeaders,\n    };\n    if (opts.body && opts.bodySerializer) {\n      opts.body = opts.bodySerializer(opts.body);\n    }\n\n    const url = getUrl({\n      path: opts.path,\n      url: opts.url,\n    });\n\n    const _axios = opts.axios || instance;\n\n    try {\n      const response = await _axios({\n        ...opts,\n        data: opts.body,\n        params: opts.query,\n        url,\n      });\n\n      let { data } = response;\n\n      if (opts.responseType === 'json' && opts.responseTransformer) {\n        data = await opts.responseTransformer(data);\n      }\n\n      return {\n        ...response,\n        data: data ?? {},\n      };\n    } catch (error) {\n      const e = error as AxiosError;\n      if (opts.throwOnError) {\n        throw e;\n      }\n      // @ts-expect-error\n      e.error = e.response?.data ?? {};\n      return e;\n    }\n  };\n\n  return {\n    delete: (options) => request({ ...options, method: 'delete' }),\n    get: (options) => request({ ...options, method: 'get' }),\n    getConfig,\n    head: (options) => request({ ...options, method: 'head' }),\n    instance,\n    options: (options) => request({ ...options, method: 'options' }),\n    patch: (options) => request({ ...options, method: 'patch' }),\n    post: (options) => request({ ...options, method: 'post' }),\n    put: (options) => request({ ...options, method: 'put' }),\n    request,\n    setConfig,\n  } as Client;\n};\n\nexport type {\n  Client,\n  Config,\n  Options,\n  OptionsLegacyParser,\n  RequestOptions,\n  RequestResult,\n} from './types';\nexport {\n  createConfig,\n  formDataBodySerializer,\n  jsonBodySerializer,\n  urlSearchParamsBodySerializer,\n} from './utils';\n"]}