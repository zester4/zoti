import type { ComponentPropsWithoutRef, ElementType } from "react";
import type { RemoveUIMessage, UIMessage } from "../types.js";
interface MessageLike {
    id?: string;
}
export declare const typedUi: <Decl extends Record<string, ElementType>>(config: {
    writer?: (chunk: unknown) => void;
    runId?: string;
    metadata?: Record<string, unknown>;
    tags?: string[];
    runName?: string;
}) => {
    push: <K extends keyof Decl & string>(message: {
        id?: string | undefined;
        name: K;
        props: { [K_1 in keyof Decl]: ComponentPropsWithoutRef<Decl[K_1]>; }[K];
        metadata?: Record<string, unknown> | undefined;
    }, options?: {
        message?: MessageLike;
    }) => UIMessage;
    delete: (id: string) => RemoveUIMessage;
    items: (UIMessage | RemoveUIMessage)[];
};
export {};
